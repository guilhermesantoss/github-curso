Configurando username e email
git config --global user.name "Meu nome"
git config --global user.email "meuemail@teste.com"

Configurando editor principal / OPCOES(vim, atom, code)
git config --global core.editor vim

Gravar login e senha para nao precisar digitar toda vez que fizer um git push
git config credential.helper store / git config --global credential.helper store

Para verificar qual a URL remota que esta conectado com o seu projeto
git remote -v

// --- Comandos do editor vim --- //
*para editar algum arquivo de qualquer extensao
vim nome_do_arquivo.extensao

a -> para entrar no modo de edicao e ver o conteudo do arquivo
Ctrl+C / ESC -> para sair do modo de edicao
:q -> para forcar a saida do editor
:q! -> para sair sem salvar
:wq -> para sair e salvar

Imprimir valor do username, email, editor principal
git config user.name
git config user.email
git config core.editor

Imprimir todas as config do git
git config --list

Criar diretorio no terminal
mkdir nome_do_diretorio

Comando para criar um arquivo
echo conteudo_de_dentro_do_arquivo >> nome_do_arquivo.extensao

Navegar entre os diretorios
cd nome_da_pasta

Voltar um diretorio acima
cd ..

Para iniciar um repositorio git local
git init

// --- Comandos Linux --- //
Para ver a estrutura de pastas
ls -l / ll 

Para ver estrutura de pastas e arquivos ocultos
ls -la / ll -a

Ver log de todos os commits do projeto
git log

Cancelar o comando git log
tecla Q, utilizar a tecla Z para dar a rolagem mais rapida dos logs

Ver os logs mostrando os arquivos que foram alterados
git log --name-only

Ver logs com informacoes de branch
git log --decorate

Ver logs filtrando pelo autor do commit
git log --author="Nome"

Ver log em ordem alfabetica mostrando a quantidade de commits, quem fez e o comentario da pessoa
git shortlog

Ver somente o nome da pessoa e quantos commits ela fez
git shortlog -sn

Ver grafico dos branchs do projeto
git log --graph

Buscar um commit utilizando uma string como filtro
git log --grep="fix"

Ver alteracoes de um commit especifico utilizando a hash do log
git show hash

Comando para ver as alteracoes antes de commitar os arquivos
git diff

Comando para ver somente os arquivos que foram modificados
git diff --name-only

Comando para adicionar todos os arquivos modified ao staged
git add .

Comando para adicionar um unico arquivo ao staged
git add nome_do_arquivo

Comando para adicionar ao staged e comitar um arquivo ja existente
git commit -am "mensagem"

Comando para commitar e digitar uma mensagem
git commit -m "Sua mensagem"

Comando para subir as suas alteracoes no repositorio remote
git push origin nome_do_branch

Comando para atualizar o repositorio local com os arquivos do remote
git pull

Para mergear alteracoes por exemplo, da branch guitoow para master
git branch master;

--> estando na branch master
git merge guitoow

--> agora vc tem todas as novas funcionalidades da branch guitoow na branch master

Comando para clonar um projeto
git clone link_do_projeto nome_da_pasta_de_projeto

Comando para voltar as alteracoes feitas em um arquivo, exemplo README.md
git checkout README.md

Comando para criar uma branch e ao mesmo tempo entrar nessa branch
git checkout -b nome_da_branch

Comando para tirar o arquivo do Staged, ou seja pronto para comitar
git reset HEAD nome_do_arquivo

Comando para resetar commits, tem 3 tipos: --soft --mixed --hard
git reset --soft hash_log
::--soft:: mata o commit e deixa o arquivo preparado para commitar, ou seja, staged
::--mixed:: mata o commit e deixa o arquivo unstaged
::--hard:: mata o commit e desfaz todas as alteracoes ja feitas

Comando para listar todos os branchs existentes no projeto e ele indica em qual branch você está atualmente
git branch

Comando para deletar um branch ("-D" é uma alias para "--delete --force")
git branch -D nome_do_branch

Comando para criar alias (abreviações de comandos)
git config --global alias.s status -> abreviação para "git status" que agora é "git s"

Comando para criar versionamento com tags, por exemplo pixi.js v4.6.2 e essa tag contém todas as informações da realease
git tag -a v1.0.0 -m "sua_mensagem"

Comando para reverter um código sem ter que utilizar git reset, e ele não some com o commit do kra que eu reverti
git revert hash -> essa hash, é a do commit que vc deseja reverter

Comando para apagar branch e tags remotos
git tag -d nome_da_tag
e para retirar do repositorio remoto
git push origin :nome_da_tag
a mesma coisa server para o branch

//-------------------------------------------------------------
Command line instructions

Git global setup
git config --global user.name "Guilherme Santos"
git config --global user.email "g.santos.sfc@gmail.com"

Create a new repository
git clone url_do_projeto
cd nome_do_projeto
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder
cd existing_folder
git init
git remote add origin url_do_projeto
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin url_do_projeto
git push -u origin --all
git push -u origin --tags
//-------------------------------------------------------------
Quando o projeto estiver na sua maquina sem Git e vc vai sincronizar com o remote

echo # nome_do_projeto >> README.md
git init
git add .
git commit -m "commit inicial"
git remote add origin https://github.com/guilhermesantos1/nome_do_projeto.git
git push -u origin master
//-------------------------------------------------------------
